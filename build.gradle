description = 'Model Project'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
    repositories {
        maven { url 'https://repo.springsource.org/plugins-snapshot' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:bundlor-plugin:0.1.0-SNAPSHOT'
        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.0-SNAPSHOT'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.0.x-SNAPSHOT'
    }
}

allprojects {
    group = 'org.springframework.project.gradle'
    apply plugin: 'artifactory'
}

subprojects { subproject ->
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'bundlor'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

    repositories {
        maven { url 'https://repo.springsource.org/libs-snapshot' }
        maven { url 'https://repo.springsource.org/plugins-release' }
    }

    dependencies {
        compile 'log4j:log4j:1.2.16'
        testCompile 'junit:junit:4.8.2'
    }

    bundlor {
        enabled = true
        failOnWarnings = true
        bundleManifestVersion = 2
        bundleVendor = 'SpringSource'
        bundleName = project.description
        bundleVersion = project.version
        importTemplate = [
            'org.apache.log4j.*;version="[1.2.16, 2.0.0)"'
        ]
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    install {
        repositories.mavenInstaller {
            customizePom(pom, subproject)
        }
    }
}

project(':model-project-core') {
    description = "Model Project Core"
    bundlor {
        bundleSymbolicName = 'org.springframework.project.core'
    }
}

project(':model-project-aj') {
    description = "Model Project AspectJ Support"
    bundlor {
        bundleSymbolicName = 'org.springframework.project.aj'
        importTemplate += [
            "org.springframework.project.core.*;version=\"${project.version}\""
        ]
    }
    dependencies {
        compile project(':model-project-core')
    }
}

apply plugin: 'docbook-reference'

reference {
    sourceDir = file('src/reference')
}

task aggregatedJavadoc(type: Javadoc) {
    group = 'Documentation'
    description = 'Generates aggregated Javadoc API documentation.'
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, "api")
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}

task docsZip(type: Zip) {
    group = 'Distribution'
    description = "Builds -docs archive containing api and reference for " +
                  "deployment at static.springframework.org/${rootProject.name}/docs."
    classifier = 'docs'

    from('src/dist') {
        include 'changelog.txt'
    }

    dependsOn aggregatedJavadoc
    from (aggregatedJavadoc.destinationDir) {
        into 'api'
    }

    dependsOn reference
    from (buildDir) {
        include 'reference/**/*'
    }
}

task distZip(type: Zip) {
    group = 'Distribution'
    description = 'Builds -dist archive, containing all jars and docs, ' +
                  'suitable for community download page.'
    classifier = 'dist'

    def baseDir = "${project.name}-${project.version}";

    from('src/dist') {
        include 'license.txt'
        include 'notice.txt'
        include 'readme.txt'
        into "${baseDir}"
    }

    dependsOn docsZip
    from(zipTree(docsZip.archivePath)) {
        into "${baseDir}/docs"
    }

    subprojects.each { subproject ->
        dependsOn subproject.jar
        dependsOn subproject.sourcesJar
        dependsOn subproject.javadocJar
        into("${baseDir}/libs") {
            from subproject.jar.archivePath
            from subproject.sourcesJar.archivePath
            from subproject.javadocJar.archivePath
        }
    }
}

task schemaZip(type: Zip) {
    group = 'Distribution'
    description = 'Builds -schema archive containing all XSDs for deployment ' +
                  'at static.springframework.org/schema.'
    classifier = 'schema'

    subprojects.each { subproject ->
        def Properties schemas = new Properties();
        def shortName = subproject.name.replaceFirst("${rootProject.name}-", '')

        subproject.sourceSets.main.resources.find {
            it.path.endsWith('META-INF/spring.schemas')
        }?.withInputStream { schemas.load(it) }

        for (def key : schemas.keySet()) {
            File xsdFile = subproject.sourceSets.main.resources.find {
                it.path.endsWith(schemas.get(key))
            }
            assert xsdFile != null
            into ("schema/${rootProject.name}/${shortName}") {
                from xsdFile.path
            }
        }
    }
}

artifacts {
    archives distZip
    archives docsZip
    archives schemaZip
}

task dist(dependsOn: assemble) {
    group = 'Distribution'
    description = 'Builds -dist, -docs and -schema distribution archives.'
}


def repoUser = project.properties['REPO_USERNAME']
def repoPass = project.properties['REPO_PASSWORD']

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(':artifactoryPublish') &&
            (repoUser == null || repoPass == null)) {
        logger.warn("WARNING: 'artifactoryPublish' goal specified, but " +
            "REPO_USERNAME/REPO_PASSWORD properties have not been provided. " +
            "Authorization may fail.")
    }
}

artifactory {
    contextUrl = 'https://repo.springsource.org'
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = repoUser
            password = repoPass
        }
        defaults {
            publishConfigs('archives')
            properties {
                archives "*:*:*:docs@zip", type: 'docs-zip', deployed: 'false'
                archives "*:*:*:dist@zip", type: 'dist-zip', deployed: 'false'
                archives "*:*:*:schema@zip", type: 'schema-zip', deployed: 'false'
            }
        }
    }
    resolve {
        repository {
            repoKey = 'libs-releases'
            username = repoUser
            password = repoPass
            maven = true
        }
    }
}

def customizePom(def pom, def gradleProject) {
    pom.whenConfigured { generatedPom ->
        // respect 'optional' and 'provided' dependencies
        def deps = gradleProject.configurations.runtime.allDependencies
        def optionalDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('optional') && dep.optional
        }
        def providedDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('provided') && dep.provided
        }
        generatedPom.dependencies.each { mavenDep ->
            mavenDep.optional = optionalDeps.any { optionalDep ->
                optionalDep.group == mavenDep.groupId &&
                        optionalDep.name == mavenDep.artifactId &&
                        optionalDep.version == mavenDep.version
            }
            boolean isProvided = providedDeps.any { providedDep ->
                providedDep.group == mavenDep.groupId &&
                        providedDep.name == mavenDep.artifactId &&
                        providedDep.version == mavenDep.version
            }
            if (isProvided) {
                mavenDep.scope = 'provided'
            }
        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/cbeams/model-project-gradle'
            organization {
                name = 'SpringSource'
                url = 'http://springsource.org'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/cbeams/model-project-gradle'
                connection = 'scm:git:git://github.com/cbeams/model-project-gradle.git'
                developerConnection = 'scm:git:git://github.com/cbeams/model-project-gradle.git'
            }
            developers {
                developer {
                    id = 'cbeams'
                    name = 'Chris Beams'
                    email = 'cbeams@vmware.com'
                }
            }
            contributors {
                contributor {
                    id = 'jdoe'
                    name = 'John Doe'
                    email = 'john@doe.org'
                }
            }
        }
    }
}

